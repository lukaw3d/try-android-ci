{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,O,C,E,E,A,a,O,Q,A,Y,O,O,S,O,Q,K,Q,S,W,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,K,mB,C,C,a,Q,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,a,M,C,E,I,E,C,C,E,C,I,W,O,G,C,C,E,C,E,C,K,E,Q,a,E,E,Q,I,C,C,O,C,C,E,C,Q,S,a,C,E,I,E,a,Q,G,M,A,C,I,E,C,E,W,E,C,C,W,gB,C,E,W,O,S,C,E,I,C,G,E,I,C,O,W,I,C,Q,C,C,E,W,Q,E,W,M,E,W,O,E,W,S,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,Q,C,E,C,E,A,E,O,e,W,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,W,I,I,E,E,E,E,O,I,W,C,C,E,E,G,E,C,I,E,W,E,A,C,U,O,S,A,a,O,O,O,Q,E,A,Y,O,Q,O,I,O,W,O,C,G,G,C,I,C,E,C,C,C,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,kB,G,E,O,E,iB,WG8Ba,OAAA,C,G,I,E,E,2C,E,E,sC,E,E,oC,E,E,gC,E,E,4B,E,E,gC,E,E,gCA9Bb,EAAA,EAAA,mBAEA,EAAA,EAAA,gBA0BA,EAAA,EAAA,aAEa,EAAP,SAAA,CAAA,E,aAAO,AAAA,CAAA,EAAA,EAAA,CAAA,EAAA,eAAA,GAAA,IAAA,EAAA,AAAA,CAAA,EAAA,EAAA,CAAA,EAAA,gBAAA,SAAA,qB,E,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,EAAA,IAAA,CAAA,gB,E,E,K,M,E,C,I,C,C,O,M,U,M,K,aACH,EAAA,UAAY,IAAI,IAChB,EAAA,kBAAoB,IAAI,IACxB,EAAA,KAA+B,KAE/B,EAAA,2BAA6B,IAkF7B,EAAA,gCAAkC,EAAK,wBAAwB,KAA/D,AAAA,CAAA,EAAA,EAAA,CAAA,EAAA,IA8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AAA,EAAA,EAAA,MAAA,EAAA,KAAA,MAAA,C,E,G,CACqB,MAAA,C,EAAM,AADrB,CAAA,EAAN,EAAM,KAAA,EAC6B,qB,A,M,EAAhC,EAAkB,EAAlB,OACA,EAAA,EAAA,CACD,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,E,M,C,M,E,E,K,K,C,E,G,G,G,EAAA,EAAwB,CAAxB,CAAA,OAAA,SAAA,G,E,M,C,M,EAAA,GAAA,EAAA,AAAA,CAAA,EAAA,EAAA,MAAA,EAAA,KAAA,MAAA,C,E,E,CAIY,OAJN,EAAN,EAAM,MACT,EAAA,EAAmB,K,E,CACjB,KAAM,EAAe,KACrB,WAAY,EAAK,cAAc,E,EAClB,C,EAAM,EAAK,eAAe,G,A,M,EAHzC,EAAA,MAAA,EAAA,CAGE,CAAA,EAAA,YAAa,EAAb,OAAA,CAAA,E,E,E,M,C,M,E,OAJC,EAAA,CAAA,E,C,E,E,A,M,E,M,C,E,G,A,M,G,O,E,E,OAAA,EAAA,CAAA,EAAA,EAAA,E,C,E,G,A,M,G,G,CAAA,GAAA,AAAA,MAAA,EAAA,QAAA,EAAA,Q,Q,CAAA,GAAA,EAAA,MAAA,C,C,M,C,E,A,M,GAOL,EAAY,KAAK,CAAE,KAAM,EAAQ,KAAM,gBAAiB,CAAkB,G,E,M,E,M,G,OAVvE,EAAA,CAAA,E,C,E,E,A,M,G,M,C,E,G,A,M,G,O,E,E,OAAA,EAAA,CAAA,EAAA,EAAA,E,C,E,G,A,M,G,G,CAAA,GAAA,AAAA,MAAA,EAAA,QAAA,EAAA,Q,Q,CAAA,GAAA,EAAA,MAAA,C,C,M,C,E,A,M,GAYL,MAAA,C,EAAO,CAAE,SAAU,CAAW,E,A,C,EAChC,I,C,E,CAEc,IAAA,iBAAN,MAAA,SAAqB,CAAiD,EAAtE,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,EAAA,W,M,A,C,E,E,C,E,I,C,S,C,E,O,E,O,K,EAEgB,O,E,K,K,C,E,G,E,EAAA,C,EAAM,EAAe,iB,A,M,EACzC,MAAA,C,EAAO,AADa,EAAd,OACa,IAAI,SAAC,CAAjB,EAAiC,MAAA,CACtC,KAAM,EAAW,IAClB,C,G,A,M,EAED,OADA,EAAA,OACA,C,E,E,C,A,M,E,M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","sources":["<anon>","node_modules/@oasisprotocol/ionic-ledger-hw-transport-ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/web.js","<<jsx-config-pragma.js>>","node_modules/@oasisprotocol/ionic-ledger-hw-transport-ble/node_modules/@capacitor-community/bluetooth-le/src/web.ts","node_modules/@oasisprotocol/ionic-ledger-hw-transport-ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/timeout.js","node_modules/@oasisprotocol/ionic-ledger-hw-transport-ble/node_modules/@capacitor-community/bluetooth-le/src/timeout.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"8m3QJ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"BluetoothLeWeb\", function() {\n    return BluetoothLeWeb;\n});\nvar _assertThisInitialized = require(\"@swc/helpers/_/_assert_this_initialized\");\nvar _asyncToGenerator = require(\"@swc/helpers/_/_async_to_generator\");\nvar _classCallCheck = require(\"@swc/helpers/_/_class_call_check\");\nvar _createClass = require(\"@swc/helpers/_/_create_class\");\nvar _inherits = require(\"@swc/helpers/_/_inherits\");\nvar _createSuper = require(\"@swc/helpers/_/_create_super\");\nvar _tsGenerator = require(\"@swc/helpers/_/_ts_generator\");\nvar _core = require(\"@capacitor/core\");\nvar _conversion = require(\"./conversion\");\nvar _timeout = require(\"./timeout\");\nvar BluetoothLeWeb = /*#__PURE__*/ function(WebPlugin) {\n    \"use strict\";\n    (0, _inherits._)(BluetoothLeWeb, WebPlugin);\n    var _super = (0, _createSuper._)(BluetoothLeWeb);\n    function BluetoothLeWeb() {\n        (0, _classCallCheck._)(this, BluetoothLeWeb);\n        var _this;\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(Array.prototype.slice.call(arguments)));\n        _this.deviceMap = new Map();\n        _this.discoveredDevices = new Map();\n        _this.scan = null;\n        _this.DEFAULT_CONNECTION_TIMEOUT = 10000;\n        _this.onAdvertisementReceivedCallback = _this.onAdvertisementReceived.bind((0, _assertThisInitialized._)(_this));\n        _this.onDisconnectedCallback = _this.onDisconnected.bind((0, _assertThisInitialized._)(_this));\n        _this.onCharacteristicValueChangedCallback = _this.onCharacteristicValueChanged.bind((0, _assertThisInitialized._)(_this));\n        return _this;\n    }\n    (0, _createClass._)(BluetoothLeWeb, [\n        {\n            key: \"initialize\",\n            value: function initialize() {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var isAvailable;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (typeof navigator === \"undefined\" || !navigator.bluetooth) throw _this.unavailable(\"Web Bluetooth API not available in this browser.\");\n                                return [\n                                    4,\n                                    navigator.bluetooth.getAvailability()\n                                ];\n                            case 1:\n                                isAvailable = _state.sent();\n                                if (!isAvailable) throw _this.unavailable(\"No Bluetooth radio available.\");\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"isEnabled\",\n            value: function isEnabled() {\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        // not available on web\n                        return [\n                            2,\n                            {\n                                value: true\n                            }\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"enable\",\n            value: function enable() {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"enable is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"disable\",\n            value: function disable() {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"disable is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"startEnabledNotifications\",\n            value: function startEnabledNotifications() {\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        return [\n                            2\n                        ];\n                    });\n                // not available on web\n                })();\n            }\n        },\n        {\n            key: \"stopEnabledNotifications\",\n            value: function stopEnabledNotifications() {\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        return [\n                            2\n                        ];\n                    });\n                // not available on web\n                })();\n            }\n        },\n        {\n            key: \"isLocationEnabled\",\n            value: function isLocationEnabled() {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"isLocationEnabled is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"openLocationSettings\",\n            value: function openLocationSettings() {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"openLocationSettings is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"openBluetoothSettings\",\n            value: function openBluetoothSettings() {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"openBluetoothSettings is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"openAppSettings\",\n            value: function openAppSettings() {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"openAppSettings is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"setDisplayStrings\",\n            value: function setDisplayStrings() {\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        return [\n                            2\n                        ];\n                    });\n                // not available on web\n                })();\n            }\n        },\n        {\n            key: \"requestDevice\",\n            value: function requestDevice(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var filters, device, bleDevice;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                filters = _this.getFilters(options);\n                                return [\n                                    4,\n                                    navigator.bluetooth.requestDevice({\n                                        filters: filters.length ? filters : undefined,\n                                        optionalServices: options === null || options === void 0 ? void 0 : options.optionalServices,\n                                        acceptAllDevices: filters.length === 0\n                                    })\n                                ];\n                            case 1:\n                                device = _state.sent();\n                                _this.deviceMap.set(device.id, device);\n                                bleDevice = _this.getBleDevice(device);\n                                return [\n                                    2,\n                                    bleDevice\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"requestLEScan\",\n            value: function requestLEScan(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var filters;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _this.requestBleDeviceOptions = options;\n                                filters = _this.getFilters(options);\n                                return [\n                                    4,\n                                    _this.stopLEScan()\n                                ];\n                            case 1:\n                                _state.sent();\n                                _this.discoveredDevices = new Map();\n                                navigator.bluetooth.removeEventListener(\"advertisementreceived\", _this.onAdvertisementReceivedCallback);\n                                navigator.bluetooth.addEventListener(\"advertisementreceived\", _this.onAdvertisementReceivedCallback);\n                                return [\n                                    4,\n                                    navigator.bluetooth.requestLEScan({\n                                        filters: filters.length ? filters : undefined,\n                                        acceptAllAdvertisements: filters.length === 0,\n                                        keepRepeatedDevices: options === null || options === void 0 ? void 0 : options.allowDuplicates\n                                    })\n                                ];\n                            case 2:\n                                _this.scan = _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"onAdvertisementReceived\",\n            value: function onAdvertisementReceived(event) {\n                var _a, _b;\n                var deviceId = event.device.id;\n                this.deviceMap.set(deviceId, event.device);\n                var isNew = !this.discoveredDevices.has(deviceId);\n                if (isNew || ((_a = this.requestBleDeviceOptions) === null || _a === void 0 ? void 0 : _a.allowDuplicates)) {\n                    this.discoveredDevices.set(deviceId, true);\n                    var device = this.getBleDevice(event.device);\n                    var result = {\n                        device,\n                        localName: device.name,\n                        rssi: event.rssi,\n                        txPower: event.txPower,\n                        manufacturerData: (0, _conversion.mapToObject)(event.manufacturerData),\n                        serviceData: (0, _conversion.mapToObject)(event.serviceData),\n                        uuids: (_b = event.uuids) === null || _b === void 0 ? void 0 : _b.map((0, _conversion.webUUIDToString))\n                    };\n                    this.notifyListeners(\"onScanResult\", result);\n                }\n            }\n        },\n        {\n            key: \"stopLEScan\",\n            value: function stopLEScan() {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var _a;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        if ((_a = _this.scan) === null || _a === void 0 ? void 0 : _a.active) _this.scan.stop();\n                        _this.scan = null;\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getDevices\",\n            value: function getDevices(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var devices, bleDevices;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    navigator.bluetooth.getDevices()\n                                ];\n                            case 1:\n                                devices = _state.sent();\n                                bleDevices = devices.filter(function(device) {\n                                    return options.deviceIds.includes(device.id);\n                                }).map(function(device) {\n                                    _this.deviceMap.set(device.id, device);\n                                    var bleDevice = _this.getBleDevice(device);\n                                    return bleDevice;\n                                });\n                                return [\n                                    2,\n                                    {\n                                        devices: bleDevices\n                                    }\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getConnectedDevices\",\n            value: function getConnectedDevices(_options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var devices, bleDevices;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    navigator.bluetooth.getDevices()\n                                ];\n                            case 1:\n                                devices = _state.sent();\n                                bleDevices = devices.filter(function(device) {\n                                    var _a;\n                                    return (_a = device.gatt) === null || _a === void 0 ? void 0 : _a.connected;\n                                }).map(function(device) {\n                                    _this.deviceMap.set(device.id, device);\n                                    var bleDevice = _this.getBleDevice(device);\n                                    return bleDevice;\n                                });\n                                return [\n                                    2,\n                                    {\n                                        devices: bleDevices\n                                    }\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"connect\",\n            value: function connect(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var _a, _b, device, timeoutError, timeout, error;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                device = _this.getDeviceFromMap(options.deviceId);\n                                device.removeEventListener(\"gattserverdisconnected\", _this.onDisconnectedCallback);\n                                device.addEventListener(\"gattserverdisconnected\", _this.onDisconnectedCallback);\n                                timeoutError = Symbol();\n                                if (device.gatt === undefined) throw new Error(\"No gatt server available.\");\n                                _state.label = 1;\n                            case 1:\n                                _state.trys.push([\n                                    1,\n                                    3,\n                                    ,\n                                    5\n                                ]);\n                                timeout = (_a = options.timeout) !== null && _a !== void 0 ? _a : _this.DEFAULT_CONNECTION_TIMEOUT;\n                                return [\n                                    4,\n                                    (0, _timeout.runWithTimeout)(device.gatt.connect(), timeout, timeoutError)\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 3:\n                                error = _state.sent();\n                                // cancel pending connect call, does not work yet in chromium because of a bug:\n                                // https://bugs.chromium.org/p/chromium/issues/detail?id=684073\n                                return [\n                                    4,\n                                    (_b = device.gatt) === null || _b === void 0 ? void 0 : _b.disconnect()\n                                ];\n                            case 4:\n                                _state.sent();\n                                if (error === timeoutError) throw new Error(\"Connection timeout\");\n                                else throw error;\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 5:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"onDisconnected\",\n            value: function onDisconnected(event) {\n                var deviceId = event.target.id;\n                var key = `disconnected|${deviceId}`;\n                this.notifyListeners(key, null);\n            }\n        },\n        {\n            key: \"createBond\",\n            value: function createBond(_options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"createBond is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"isBonded\",\n            value: function isBonded(_options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"isBonded is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"disconnect\",\n            value: function disconnect(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var _a;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        (_a = _this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 || _a.disconnect();\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getServices\",\n            value: function getServices(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var _a, _b, services, bleServices, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, service, characteristics, bleCharacteristics, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, characteristic, _, _tmp, err, err;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    (_a = _this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryServices()\n                                ];\n                            case 1:\n                                services = (_b = _state.sent()) !== null && _b !== void 0 ? _b : [];\n                                bleServices = [];\n                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                                _state.label = 2;\n                            case 2:\n                                _state.trys.push([\n                                    2,\n                                    15,\n                                    16,\n                                    17\n                                ]);\n                                _iterator = services[Symbol.iterator]();\n                                _state.label = 3;\n                            case 3:\n                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [\n                                    3,\n                                    14\n                                ];\n                                service = _step.value;\n                                return [\n                                    4,\n                                    service.getCharacteristics()\n                                ];\n                            case 4:\n                                characteristics = _state.sent();\n                                bleCharacteristics = [];\n                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                _state.label = 5;\n                            case 5:\n                                _state.trys.push([\n                                    5,\n                                    10,\n                                    11,\n                                    12\n                                ]);\n                                _iterator1 = characteristics[Symbol.iterator]();\n                                _state.label = 6;\n                            case 6:\n                                if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [\n                                    3,\n                                    9\n                                ];\n                                characteristic = _step1.value;\n                                _ = bleCharacteristics.push;\n                                _tmp = {\n                                    uuid: characteristic.uuid,\n                                    properties: _this.getProperties(characteristic)\n                                };\n                                return [\n                                    4,\n                                    _this.getDescriptors(characteristic)\n                                ];\n                            case 7:\n                                _.apply(bleCharacteristics, [\n                                    (_tmp.descriptors = _state.sent(), _tmp)\n                                ]);\n                                _state.label = 8;\n                            case 8:\n                                _iteratorNormalCompletion1 = true;\n                                return [\n                                    3,\n                                    6\n                                ];\n                            case 9:\n                                return [\n                                    3,\n                                    12\n                                ];\n                            case 10:\n                                err = _state.sent();\n                                _didIteratorError1 = true;\n                                _iteratorError1 = err;\n                                return [\n                                    3,\n                                    12\n                                ];\n                            case 11:\n                                try {\n                                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                        _iterator1.return();\n                                    }\n                                } finally{\n                                    if (_didIteratorError1) {\n                                        throw _iteratorError1;\n                                    }\n                                }\n                                return [\n                                    7\n                                ];\n                            case 12:\n                                bleServices.push({\n                                    uuid: service.uuid,\n                                    characteristics: bleCharacteristics\n                                });\n                                _state.label = 13;\n                            case 13:\n                                _iteratorNormalCompletion = true;\n                                return [\n                                    3,\n                                    3\n                                ];\n                            case 14:\n                                return [\n                                    3,\n                                    17\n                                ];\n                            case 15:\n                                err = _state.sent();\n                                _didIteratorError = true;\n                                _iteratorError = err;\n                                return [\n                                    3,\n                                    17\n                                ];\n                            case 16:\n                                try {\n                                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                        _iterator.return();\n                                    }\n                                } finally{\n                                    if (_didIteratorError) {\n                                        throw _iteratorError;\n                                    }\n                                }\n                                return [\n                                    7\n                                ];\n                            case 17:\n                                return [\n                                    2,\n                                    {\n                                        services: bleServices\n                                    }\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getDescriptors\",\n            value: function getDescriptors(characteristic) {\n                return (0, _asyncToGenerator._)(function() {\n                    var descriptors, _a;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _state.trys.push([\n                                    0,\n                                    2,\n                                    ,\n                                    3\n                                ]);\n                                return [\n                                    4,\n                                    characteristic.getDescriptors()\n                                ];\n                            case 1:\n                                descriptors = _state.sent();\n                                return [\n                                    2,\n                                    descriptors.map(function(descriptor) {\n                                        return {\n                                            uuid: descriptor.uuid\n                                        };\n                                    })\n                                ];\n                            case 2:\n                                _a = _state.sent();\n                                return [\n                                    2,\n                                    []\n                                ];\n                            case 3:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getProperties\",\n            value: function getProperties(characteristic) {\n                return {\n                    broadcast: characteristic.properties.broadcast,\n                    read: characteristic.properties.read,\n                    writeWithoutResponse: characteristic.properties.writeWithoutResponse,\n                    write: characteristic.properties.write,\n                    notify: characteristic.properties.notify,\n                    indicate: characteristic.properties.indicate,\n                    authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites,\n                    reliableWrite: characteristic.properties.reliableWrite,\n                    writableAuxiliaries: characteristic.properties.writableAuxiliaries\n                };\n            }\n        },\n        {\n            key: \"getCharacteristic\",\n            value: function getCharacteristic(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var _a, service;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    (_a = _this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryService(options === null || options === void 0 ? void 0 : options.service)\n                                ];\n                            case 1:\n                                service = _state.sent();\n                                return [\n                                    2,\n                                    service === null || service === void 0 ? void 0 : service.getCharacteristic(options === null || options === void 0 ? void 0 : options.characteristic)\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getDescriptor\",\n            value: function getDescriptor(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var characteristic;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getCharacteristic(options)\n                                ];\n                            case 1:\n                                characteristic = _state.sent();\n                                return [\n                                    2,\n                                    characteristic === null || characteristic === void 0 ? void 0 : characteristic.getDescriptor(options === null || options === void 0 ? void 0 : options.descriptor)\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"discoverServices\",\n            value: function discoverServices(_options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"discoverServices is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getMtu\",\n            value: function getMtu(_options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"getMtu is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"requestConnectionPriority\",\n            value: function requestConnectionPriority(_options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"requestConnectionPriority is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"readRssi\",\n            value: function readRssi(_options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        throw _this.unavailable(\"readRssi is not available on web.\");\n                    });\n                })();\n            }\n        },\n        {\n            key: \"read\",\n            value: function read(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var characteristic, value;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getCharacteristic(options)\n                                ];\n                            case 1:\n                                characteristic = _state.sent();\n                                return [\n                                    4,\n                                    characteristic === null || characteristic === void 0 ? void 0 : characteristic.readValue()\n                                ];\n                            case 2:\n                                value = _state.sent();\n                                return [\n                                    2,\n                                    {\n                                        value\n                                    }\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"write\",\n            value: function write(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var characteristic, dataView;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getCharacteristic(options)\n                                ];\n                            case 1:\n                                characteristic = _state.sent();\n                                if (typeof options.value === \"string\") dataView = (0, _conversion.hexStringToDataView)(options.value);\n                                else dataView = options.value;\n                                return [\n                                    4,\n                                    characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithResponse(dataView)\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"writeWithoutResponse\",\n            value: function writeWithoutResponse(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var characteristic, dataView;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getCharacteristic(options)\n                                ];\n                            case 1:\n                                characteristic = _state.sent();\n                                if (typeof options.value === \"string\") dataView = (0, _conversion.hexStringToDataView)(options.value);\n                                else dataView = options.value;\n                                return [\n                                    4,\n                                    characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithoutResponse(dataView)\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"readDescriptor\",\n            value: function readDescriptor(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var descriptor, value;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getDescriptor(options)\n                                ];\n                            case 1:\n                                descriptor = _state.sent();\n                                return [\n                                    4,\n                                    descriptor === null || descriptor === void 0 ? void 0 : descriptor.readValue()\n                                ];\n                            case 2:\n                                value = _state.sent();\n                                return [\n                                    2,\n                                    {\n                                        value\n                                    }\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"writeDescriptor\",\n            value: function writeDescriptor(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var descriptor, dataView;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getDescriptor(options)\n                                ];\n                            case 1:\n                                descriptor = _state.sent();\n                                if (typeof options.value === \"string\") dataView = (0, _conversion.hexStringToDataView)(options.value);\n                                else dataView = options.value;\n                                return [\n                                    4,\n                                    descriptor === null || descriptor === void 0 ? void 0 : descriptor.writeValue(dataView)\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"startNotifications\",\n            value: function startNotifications(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var characteristic;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getCharacteristic(options)\n                                ];\n                            case 1:\n                                characteristic = _state.sent();\n                                characteristic === null || characteristic === void 0 || characteristic.removeEventListener(\"characteristicvaluechanged\", _this.onCharacteristicValueChangedCallback);\n                                characteristic === null || characteristic === void 0 || characteristic.addEventListener(\"characteristicvaluechanged\", _this.onCharacteristicValueChangedCallback);\n                                return [\n                                    4,\n                                    characteristic === null || characteristic === void 0 ? void 0 : characteristic.startNotifications()\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"onCharacteristicValueChanged\",\n            value: function onCharacteristicValueChanged(event) {\n                var _a, _b;\n                var characteristic = event.target;\n                var key = `notification|${(_a = characteristic.service) === null || _a === void 0 ? void 0 : _a.device.id}|${(_b = characteristic.service) === null || _b === void 0 ? void 0 : _b.uuid}|${characteristic.uuid}`;\n                this.notifyListeners(key, {\n                    value: characteristic.value\n                });\n            }\n        },\n        {\n            key: \"stopNotifications\",\n            value: function stopNotifications(options) {\n                var _this = this;\n                return (0, _asyncToGenerator._)(function() {\n                    var characteristic;\n                    return (0, _tsGenerator._)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getCharacteristic(options)\n                                ];\n                            case 1:\n                                characteristic = _state.sent();\n                                return [\n                                    4,\n                                    characteristic === null || characteristic === void 0 ? void 0 : characteristic.stopNotifications()\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getFilters\",\n            value: function getFilters(options) {\n                var _a;\n                var filters = [];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = ((_a = options === null || options === void 0 ? void 0 : options.services) !== null && _a !== void 0 ? _a : [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var service = _step.value;\n                        filters.push({\n                            services: [\n                                service\n                            ],\n                            name: options === null || options === void 0 ? void 0 : options.name,\n                            namePrefix: options === null || options === void 0 ? void 0 : options.namePrefix\n                        });\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (((options === null || options === void 0 ? void 0 : options.name) || (options === null || options === void 0 ? void 0 : options.namePrefix)) && filters.length === 0) filters.push({\n                    name: options.name,\n                    namePrefix: options.namePrefix\n                });\n                return filters;\n            }\n        },\n        {\n            key: \"getDeviceFromMap\",\n            value: function getDeviceFromMap(deviceId) {\n                var device = this.deviceMap.get(deviceId);\n                if (device === undefined) throw new Error('Device not found. Call \"requestDevice\", \"requestLEScan\" or \"getDevices\" first.');\n                return device;\n            }\n        },\n        {\n            key: \"getBleDevice\",\n            value: function getBleDevice(device) {\n                var _a;\n                var bleDevice = {\n                    deviceId: device.id,\n                    // use undefined instead of null if name is not available\n                    name: (_a = device.name) !== null && _a !== void 0 ? _a : undefined\n                };\n                return bleDevice;\n            }\n        }\n    ]);\n    return BluetoothLeWeb;\n}((0, _core.WebPlugin));\n\n},{\"@swc/helpers/_/_assert_this_initialized\":\"1a6MR\",\"@swc/helpers/_/_async_to_generator\":\"6SrlH\",\"@swc/helpers/_/_class_call_check\":\"hcHZl\",\"@swc/helpers/_/_create_class\":\"dr6J2\",\"@swc/helpers/_/_inherits\":\"37q8d\",\"@swc/helpers/_/_create_super\":\"14F0p\",\"@swc/helpers/_/_ts_generator\":\"dgtxH\",\"@capacitor/core\":\"9nVQl\",\"./conversion\":\"lL5Pr\",\"./timeout\":\"hepty\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"bFO5N\"}],\"hepty\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"runWithTimeout\", function() {\n    return runWithTimeout;\n});\nvar _asyncToGenerator = require(\"@swc/helpers/_/_async_to_generator\");\nvar _tsGenerator = require(\"@swc/helpers/_/_ts_generator\");\nfunction runWithTimeout(promise, time, exception) {\n    return _runWithTimeout.apply(this, arguments);\n}\nfunction _runWithTimeout() {\n    _runWithTimeout = (0, _asyncToGenerator._)(function(promise, time, exception) {\n        var timer;\n        return (0, _tsGenerator._)(this, function(_state) {\n            return [\n                2,\n                Promise.race([\n                    promise,\n                    new Promise(function(_, reject) {\n                        timer = setTimeout(function() {\n                            return reject(exception);\n                        }, time);\n                    })\n                ]).finally(function() {\n                    return clearTimeout(timer);\n                })\n            ];\n        });\n    });\n    return _runWithTimeout.apply(this, arguments);\n}\n\n},{\"@swc/helpers/_/_async_to_generator\":\"6SrlH\",\"@swc/helpers/_/_ts_generator\":\"dgtxH\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"bFO5N\"}]},[], null, \"parcelRequireffbd\")\n\n//# sourceMappingURL=web.d44f1718.js.map\n","import { WebPlugin } from '@capacitor/core';\nimport { hexStringToDataView, mapToObject, webUUIDToString } from './conversion';\nimport { runWithTimeout } from './timeout';\nexport class BluetoothLeWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.deviceMap = new Map();\n        this.discoveredDevices = new Map();\n        this.scan = null;\n        this.DEFAULT_CONNECTION_TIMEOUT = 10000;\n        this.onAdvertisementReceivedCallback = this.onAdvertisementReceived.bind(this);\n        this.onDisconnectedCallback = this.onDisconnected.bind(this);\n        this.onCharacteristicValueChangedCallback = this.onCharacteristicValueChanged.bind(this);\n    }\n    async initialize() {\n        if (typeof navigator === 'undefined' || !navigator.bluetooth) {\n            throw this.unavailable('Web Bluetooth API not available in this browser.');\n        }\n        const isAvailable = await navigator.bluetooth.getAvailability();\n        if (!isAvailable) {\n            throw this.unavailable('No Bluetooth radio available.');\n        }\n    }\n    async isEnabled() {\n        // not available on web\n        return { value: true };\n    }\n    async enable() {\n        throw this.unavailable('enable is not available on web.');\n    }\n    async disable() {\n        throw this.unavailable('disable is not available on web.');\n    }\n    async startEnabledNotifications() {\n        // not available on web\n    }\n    async stopEnabledNotifications() {\n        // not available on web\n    }\n    async isLocationEnabled() {\n        throw this.unavailable('isLocationEnabled is not available on web.');\n    }\n    async openLocationSettings() {\n        throw this.unavailable('openLocationSettings is not available on web.');\n    }\n    async openBluetoothSettings() {\n        throw this.unavailable('openBluetoothSettings is not available on web.');\n    }\n    async openAppSettings() {\n        throw this.unavailable('openAppSettings is not available on web.');\n    }\n    async setDisplayStrings() {\n        // not available on web\n    }\n    async requestDevice(options) {\n        const filters = this.getFilters(options);\n        const device = await navigator.bluetooth.requestDevice({\n            filters: filters.length ? filters : undefined,\n            optionalServices: options === null || options === void 0 ? void 0 : options.optionalServices,\n            acceptAllDevices: filters.length === 0,\n        });\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n    }\n    async requestLEScan(options) {\n        this.requestBleDeviceOptions = options;\n        const filters = this.getFilters(options);\n        await this.stopLEScan();\n        this.discoveredDevices = new Map();\n        navigator.bluetooth.removeEventListener('advertisementreceived', this.onAdvertisementReceivedCallback);\n        navigator.bluetooth.addEventListener('advertisementreceived', this.onAdvertisementReceivedCallback);\n        this.scan = await navigator.bluetooth.requestLEScan({\n            filters: filters.length ? filters : undefined,\n            acceptAllAdvertisements: filters.length === 0,\n            keepRepeatedDevices: options === null || options === void 0 ? void 0 : options.allowDuplicates,\n        });\n    }\n    onAdvertisementReceived(event) {\n        var _a, _b;\n        const deviceId = event.device.id;\n        this.deviceMap.set(deviceId, event.device);\n        const isNew = !this.discoveredDevices.has(deviceId);\n        if (isNew || ((_a = this.requestBleDeviceOptions) === null || _a === void 0 ? void 0 : _a.allowDuplicates)) {\n            this.discoveredDevices.set(deviceId, true);\n            const device = this.getBleDevice(event.device);\n            const result = {\n                device,\n                localName: device.name,\n                rssi: event.rssi,\n                txPower: event.txPower,\n                manufacturerData: mapToObject(event.manufacturerData),\n                serviceData: mapToObject(event.serviceData),\n                uuids: (_b = event.uuids) === null || _b === void 0 ? void 0 : _b.map(webUUIDToString),\n            };\n            this.notifyListeners('onScanResult', result);\n        }\n    }\n    async stopLEScan() {\n        var _a;\n        if ((_a = this.scan) === null || _a === void 0 ? void 0 : _a.active) {\n            this.scan.stop();\n        }\n        this.scan = null;\n    }\n    async getDevices(options) {\n        const devices = await navigator.bluetooth.getDevices();\n        const bleDevices = devices\n            .filter((device) => options.deviceIds.includes(device.id))\n            .map((device) => {\n            this.deviceMap.set(device.id, device);\n            const bleDevice = this.getBleDevice(device);\n            return bleDevice;\n        });\n        return { devices: bleDevices };\n    }\n    async getConnectedDevices(_options) {\n        const devices = await navigator.bluetooth.getDevices();\n        const bleDevices = devices\n            .filter((device) => {\n            var _a;\n            return (_a = device.gatt) === null || _a === void 0 ? void 0 : _a.connected;\n        })\n            .map((device) => {\n            this.deviceMap.set(device.id, device);\n            const bleDevice = this.getBleDevice(device);\n            return bleDevice;\n        });\n        return { devices: bleDevices };\n    }\n    async connect(options) {\n        var _a, _b;\n        const device = this.getDeviceFromMap(options.deviceId);\n        device.removeEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n        device.addEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n        const timeoutError = Symbol();\n        if (device.gatt === undefined) {\n            throw new Error('No gatt server available.');\n        }\n        try {\n            const timeout = (_a = options.timeout) !== null && _a !== void 0 ? _a : this.DEFAULT_CONNECTION_TIMEOUT;\n            await runWithTimeout(device.gatt.connect(), timeout, timeoutError);\n        }\n        catch (error) {\n            // cancel pending connect call, does not work yet in chromium because of a bug:\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=684073\n            await ((_b = device.gatt) === null || _b === void 0 ? void 0 : _b.disconnect());\n            if (error === timeoutError) {\n                throw new Error('Connection timeout');\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    onDisconnected(event) {\n        const deviceId = event.target.id;\n        const key = `disconnected|${deviceId}`;\n        this.notifyListeners(key, null);\n    }\n    async createBond(_options) {\n        throw this.unavailable('createBond is not available on web.');\n    }\n    async isBonded(_options) {\n        throw this.unavailable('isBonded is not available on web.');\n    }\n    async disconnect(options) {\n        var _a;\n        (_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.disconnect();\n    }\n    async getServices(options) {\n        var _a, _b;\n        const services = (_b = (await ((_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryServices()))) !== null && _b !== void 0 ? _b : [];\n        const bleServices = [];\n        for (const service of services) {\n            const characteristics = await service.getCharacteristics();\n            const bleCharacteristics = [];\n            for (const characteristic of characteristics) {\n                bleCharacteristics.push({\n                    uuid: characteristic.uuid,\n                    properties: this.getProperties(characteristic),\n                    descriptors: await this.getDescriptors(characteristic),\n                });\n            }\n            bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });\n        }\n        return { services: bleServices };\n    }\n    async getDescriptors(characteristic) {\n        try {\n            const descriptors = await characteristic.getDescriptors();\n            return descriptors.map((descriptor) => ({\n                uuid: descriptor.uuid,\n            }));\n        }\n        catch (_a) {\n            return [];\n        }\n    }\n    getProperties(characteristic) {\n        return {\n            broadcast: characteristic.properties.broadcast,\n            read: characteristic.properties.read,\n            writeWithoutResponse: characteristic.properties.writeWithoutResponse,\n            write: characteristic.properties.write,\n            notify: characteristic.properties.notify,\n            indicate: characteristic.properties.indicate,\n            authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites,\n            reliableWrite: characteristic.properties.reliableWrite,\n            writableAuxiliaries: characteristic.properties.writableAuxiliaries,\n        };\n    }\n    async getCharacteristic(options) {\n        var _a;\n        const service = await ((_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryService(options === null || options === void 0 ? void 0 : options.service));\n        return service === null || service === void 0 ? void 0 : service.getCharacteristic(options === null || options === void 0 ? void 0 : options.characteristic);\n    }\n    async getDescriptor(options) {\n        const characteristic = await this.getCharacteristic(options);\n        return characteristic === null || characteristic === void 0 ? void 0 : characteristic.getDescriptor(options === null || options === void 0 ? void 0 : options.descriptor);\n    }\n    async discoverServices(_options) {\n        throw this.unavailable('discoverServices is not available on web.');\n    }\n    async getMtu(_options) {\n        throw this.unavailable('getMtu is not available on web.');\n    }\n    async requestConnectionPriority(_options) {\n        throw this.unavailable('requestConnectionPriority is not available on web.');\n    }\n    async readRssi(_options) {\n        throw this.unavailable('readRssi is not available on web.');\n    }\n    async read(options) {\n        const characteristic = await this.getCharacteristic(options);\n        const value = await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.readValue());\n        return { value };\n    }\n    async write(options) {\n        const characteristic = await this.getCharacteristic(options);\n        let dataView;\n        if (typeof options.value === 'string') {\n            dataView = hexStringToDataView(options.value);\n        }\n        else {\n            dataView = options.value;\n        }\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithResponse(dataView));\n    }\n    async writeWithoutResponse(options) {\n        const characteristic = await this.getCharacteristic(options);\n        let dataView;\n        if (typeof options.value === 'string') {\n            dataView = hexStringToDataView(options.value);\n        }\n        else {\n            dataView = options.value;\n        }\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithoutResponse(dataView));\n    }\n    async readDescriptor(options) {\n        const descriptor = await this.getDescriptor(options);\n        const value = await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.readValue());\n        return { value };\n    }\n    async writeDescriptor(options) {\n        const descriptor = await this.getDescriptor(options);\n        let dataView;\n        if (typeof options.value === 'string') {\n            dataView = hexStringToDataView(options.value);\n        }\n        else {\n            dataView = options.value;\n        }\n        await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.writeValue(dataView));\n    }\n    async startNotifications(options) {\n        const characteristic = await this.getCharacteristic(options);\n        characteristic === null || characteristic === void 0 ? void 0 : characteristic.removeEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n        characteristic === null || characteristic === void 0 ? void 0 : characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.startNotifications());\n    }\n    onCharacteristicValueChanged(event) {\n        var _a, _b;\n        const characteristic = event.target;\n        const key = `notification|${(_a = characteristic.service) === null || _a === void 0 ? void 0 : _a.device.id}|${(_b = characteristic.service) === null || _b === void 0 ? void 0 : _b.uuid}|${characteristic.uuid}`;\n        this.notifyListeners(key, {\n            value: characteristic.value,\n        });\n    }\n    async stopNotifications(options) {\n        const characteristic = await this.getCharacteristic(options);\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.stopNotifications());\n    }\n    getFilters(options) {\n        var _a;\n        const filters = [];\n        for (const service of (_a = options === null || options === void 0 ? void 0 : options.services) !== null && _a !== void 0 ? _a : []) {\n            filters.push({\n                services: [service],\n                name: options === null || options === void 0 ? void 0 : options.name,\n                namePrefix: options === null || options === void 0 ? void 0 : options.namePrefix,\n            });\n        }\n        if (((options === null || options === void 0 ? void 0 : options.name) || (options === null || options === void 0 ? void 0 : options.namePrefix)) && filters.length === 0) {\n            filters.push({\n                name: options.name,\n                namePrefix: options.namePrefix,\n            });\n        }\n        return filters;\n    }\n    getDeviceFromMap(deviceId) {\n        const device = this.deviceMap.get(deviceId);\n        if (device === undefined) {\n            throw new Error('Device not found. Call \"requestDevice\", \"requestLEScan\" or \"getDevices\" first.');\n        }\n        return device;\n    }\n    getBleDevice(device) {\n        var _a;\n        const bleDevice = {\n            deviceId: device.id,\n            // use undefined instead of null if name is not available\n            name: (_a = device.name) !== null && _a !== void 0 ? _a : undefined,\n        };\n        return bleDevice;\n    }\n}\n//# sourceMappingURL=web.js.map",null,"import { WebPlugin } from '@capacitor/core';\n\nimport { hexStringToDataView, mapToObject, webUUIDToString } from './conversion';\nimport type {\n  BleCharacteristic,\n  BleCharacteristicProperties,\n  BleDescriptor,\n  BleService,\n  TimeoutOptions,\n  BleDevice,\n  BleServices,\n  BluetoothLePlugin,\n  BooleanResult,\n  DeviceIdOptions,\n  GetConnectedDevicesOptions,\n  GetDevicesOptions,\n  GetDevicesResult,\n  ReadDescriptorOptions,\n  ReadOptions,\n  ReadResult,\n  ReadRssiResult,\n  RequestBleDeviceOptions,\n  ScanResultInternal,\n  WriteOptions,\n  WriteDescriptorOptions,\n  GetMtuResult,\n  RequestConnectionPriorityOptions,\n} from './definitions';\nimport { runWithTimeout } from './timeout';\n\nexport class BluetoothLeWeb extends WebPlugin implements BluetoothLePlugin {\n  private deviceMap = new Map<string, BluetoothDevice>();\n  private discoveredDevices = new Map<string, boolean>();\n  private scan: BluetoothLEScan | null = null;\n  private requestBleDeviceOptions: RequestBleDeviceOptions | undefined;\n  private DEFAULT_CONNECTION_TIMEOUT = 10000;\n\n  async initialize(): Promise<void> {\n    if (typeof navigator === 'undefined' || !navigator.bluetooth) {\n      throw this.unavailable('Web Bluetooth API not available in this browser.');\n    }\n    const isAvailable = await navigator.bluetooth.getAvailability();\n    if (!isAvailable) {\n      throw this.unavailable('No Bluetooth radio available.');\n    }\n  }\n\n  async isEnabled(): Promise<BooleanResult> {\n    // not available on web\n    return { value: true };\n  }\n\n  async enable(): Promise<void> {\n    throw this.unavailable('enable is not available on web.');\n  }\n\n  async disable(): Promise<void> {\n    throw this.unavailable('disable is not available on web.');\n  }\n\n  async startEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async stopEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async isLocationEnabled(): Promise<BooleanResult> {\n    throw this.unavailable('isLocationEnabled is not available on web.');\n  }\n\n  async openLocationSettings(): Promise<void> {\n    throw this.unavailable('openLocationSettings is not available on web.');\n  }\n\n  async openBluetoothSettings(): Promise<void> {\n    throw this.unavailable('openBluetoothSettings is not available on web.');\n  }\n\n  async openAppSettings(): Promise<void> {\n    throw this.unavailable('openAppSettings is not available on web.');\n  }\n\n  async setDisplayStrings(): Promise<void> {\n    // not available on web\n  }\n\n  async requestDevice(options?: RequestBleDeviceOptions): Promise<BleDevice> {\n    const filters = this.getFilters(options);\n    const device = await navigator.bluetooth.requestDevice({\n      filters: filters.length ? filters : undefined,\n      optionalServices: options?.optionalServices,\n      acceptAllDevices: filters.length === 0,\n    });\n    this.deviceMap.set(device.id, device);\n    const bleDevice = this.getBleDevice(device);\n    return bleDevice;\n  }\n\n  async requestLEScan(options?: RequestBleDeviceOptions): Promise<void> {\n    this.requestBleDeviceOptions = options;\n    const filters = this.getFilters(options);\n    await this.stopLEScan();\n    this.discoveredDevices = new Map<string, boolean>();\n    navigator.bluetooth.removeEventListener(\n      'advertisementreceived',\n      this.onAdvertisementReceivedCallback as EventListener\n    );\n    navigator.bluetooth.addEventListener('advertisementreceived', this.onAdvertisementReceivedCallback);\n    this.scan = await navigator.bluetooth.requestLEScan({\n      filters: filters.length ? filters : undefined,\n      acceptAllAdvertisements: filters.length === 0,\n      keepRepeatedDevices: options?.allowDuplicates,\n    });\n  }\n\n  private onAdvertisementReceivedCallback = this.onAdvertisementReceived.bind(this);\n\n  private onAdvertisementReceived(event: BluetoothAdvertisingEvent): void {\n    const deviceId = event.device.id;\n    this.deviceMap.set(deviceId, event.device);\n    const isNew = !this.discoveredDevices.has(deviceId);\n    if (isNew || this.requestBleDeviceOptions?.allowDuplicates) {\n      this.discoveredDevices.set(deviceId, true);\n      const device = this.getBleDevice(event.device);\n      const result: ScanResultInternal = {\n        device,\n        localName: device.name,\n        rssi: event.rssi,\n        txPower: event.txPower,\n        manufacturerData: mapToObject(event.manufacturerData),\n        serviceData: mapToObject(event.serviceData),\n        uuids: event.uuids?.map(webUUIDToString),\n      };\n      this.notifyListeners('onScanResult', result);\n    }\n  }\n\n  async stopLEScan(): Promise<void> {\n    if (this.scan?.active) {\n      this.scan.stop();\n    }\n    this.scan = null;\n  }\n\n  async getDevices(options: GetDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices\n      .filter((device) => options.deviceIds.includes(device.id))\n      .map((device) => {\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n      });\n    return { devices: bleDevices };\n  }\n\n  async getConnectedDevices(_options: GetConnectedDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices\n      .filter((device) => {\n        return device.gatt?.connected;\n      })\n      .map((device) => {\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n      });\n    return { devices: bleDevices };\n  }\n\n  async connect(options: DeviceIdOptions & TimeoutOptions): Promise<void> {\n    const device = this.getDeviceFromMap(options.deviceId);\n    device.removeEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    device.addEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    const timeoutError = Symbol();\n    if (device.gatt === undefined) {\n      throw new Error('No gatt server available.');\n    }\n    try {\n      const timeout = options.timeout ?? this.DEFAULT_CONNECTION_TIMEOUT;\n      await runWithTimeout(device.gatt.connect(), timeout, timeoutError);\n    } catch (error) {\n      // cancel pending connect call, does not work yet in chromium because of a bug:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=684073\n      await device.gatt?.disconnect();\n      if (error === timeoutError) {\n        throw new Error('Connection timeout');\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private onDisconnectedCallback = this.onDisconnected.bind(this);\n\n  private onDisconnected(event: Event): void {\n    const deviceId = (event.target as BluetoothDevice).id;\n    const key = `disconnected|${deviceId}`;\n    this.notifyListeners(key, null);\n  }\n\n  async createBond(_options: DeviceIdOptions): Promise<void> {\n    throw this.unavailable('createBond is not available on web.');\n  }\n\n  async isBonded(_options: DeviceIdOptions): Promise<BooleanResult> {\n    throw this.unavailable('isBonded is not available on web.');\n  }\n\n  async disconnect(options: DeviceIdOptions): Promise<void> {\n    this.getDeviceFromMap(options.deviceId).gatt?.disconnect();\n  }\n\n  async getServices(options: DeviceIdOptions): Promise<BleServices> {\n    const services = (await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryServices()) ?? [];\n    const bleServices: BleService[] = [];\n    for (const service of services) {\n      const characteristics = await service.getCharacteristics();\n      const bleCharacteristics: BleCharacteristic[] = [];\n      for (const characteristic of characteristics) {\n        bleCharacteristics.push({\n          uuid: characteristic.uuid,\n          properties: this.getProperties(characteristic),\n          descriptors: await this.getDescriptors(characteristic),\n        });\n      }\n      bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });\n    }\n    return { services: bleServices };\n  }\n\n  private async getDescriptors(characteristic: BluetoothRemoteGATTCharacteristic): Promise<BleDescriptor[]> {\n    try {\n      const descriptors = await characteristic.getDescriptors();\n      return descriptors.map((descriptor) => ({\n        uuid: descriptor.uuid,\n      }));\n    } catch {\n      return [];\n    }\n  }\n\n  private getProperties(characteristic: BluetoothRemoteGATTCharacteristic): BleCharacteristicProperties {\n    return {\n      broadcast: characteristic.properties.broadcast,\n      read: characteristic.properties.read,\n      writeWithoutResponse: characteristic.properties.writeWithoutResponse,\n      write: characteristic.properties.write,\n      notify: characteristic.properties.notify,\n      indicate: characteristic.properties.indicate,\n      authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites,\n      reliableWrite: characteristic.properties.reliableWrite,\n      writableAuxiliaries: characteristic.properties.writableAuxiliaries,\n    };\n  }\n\n  private async getCharacteristic(\n    options: ReadOptions | WriteOptions\n  ): Promise<BluetoothRemoteGATTCharacteristic | undefined> {\n    const service = await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryService(options?.service);\n    return service?.getCharacteristic(options?.characteristic);\n  }\n\n  private async getDescriptor(\n    options: ReadDescriptorOptions | WriteDescriptorOptions\n  ): Promise<BluetoothRemoteGATTDescriptor | undefined> {\n    const characteristic = await this.getCharacteristic(options);\n    return characteristic?.getDescriptor(options?.descriptor);\n  }\n\n  async discoverServices(_options: DeviceIdOptions): Promise<void> {\n    throw this.unavailable('discoverServices is not available on web.');\n  }\n\n  async getMtu(_options: DeviceIdOptions): Promise<GetMtuResult> {\n    throw this.unavailable('getMtu is not available on web.');\n  }\n\n  async requestConnectionPriority(_options: RequestConnectionPriorityOptions): Promise<void> {\n    throw this.unavailable('requestConnectionPriority is not available on web.');\n  }\n\n  async readRssi(_options: DeviceIdOptions): Promise<ReadRssiResult> {\n    throw this.unavailable('readRssi is not available on web.');\n  }\n\n  async read(options: ReadOptions): Promise<ReadResult> {\n    const characteristic = await this.getCharacteristic(options);\n    const value = await characteristic?.readValue();\n    return { value };\n  }\n\n  async write(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithResponse(dataView);\n  }\n\n  async writeWithoutResponse(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithoutResponse(dataView);\n  }\n\n  async readDescriptor(options: ReadDescriptorOptions): Promise<ReadResult> {\n    const descriptor = await this.getDescriptor(options);\n    const value = await descriptor?.readValue();\n    return { value };\n  }\n\n  async writeDescriptor(options: WriteDescriptorOptions): Promise<void> {\n    const descriptor = await this.getDescriptor(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await descriptor?.writeValue(dataView);\n  }\n\n  async startNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    characteristic?.removeEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    characteristic?.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    await characteristic?.startNotifications();\n  }\n\n  private onCharacteristicValueChangedCallback = this.onCharacteristicValueChanged.bind(this);\n\n  private onCharacteristicValueChanged(event: Event): void {\n    const characteristic = event.target as BluetoothRemoteGATTCharacteristic;\n    const key = `notification|${characteristic.service?.device.id}|${characteristic.service?.uuid}|${characteristic.uuid}`;\n    this.notifyListeners(key, {\n      value: characteristic.value,\n    });\n  }\n\n  async stopNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    await characteristic?.stopNotifications();\n  }\n\n  private getFilters(options?: RequestBleDeviceOptions): BluetoothLEScanFilter[] {\n    const filters: BluetoothLEScanFilter[] = [];\n    for (const service of options?.services ?? []) {\n      filters.push({\n        services: [service],\n        name: options?.name,\n        namePrefix: options?.namePrefix,\n      });\n    }\n    if ((options?.name || options?.namePrefix) && filters.length === 0) {\n      filters.push({\n        name: options.name,\n        namePrefix: options.namePrefix,\n      });\n    }\n    return filters;\n  }\n\n  private getDeviceFromMap(deviceId: string): BluetoothDevice {\n    const device = this.deviceMap.get(deviceId);\n    if (device === undefined) {\n      throw new Error('Device not found. Call \"requestDevice\", \"requestLEScan\" or \"getDevices\" first.');\n    }\n    return device;\n  }\n\n  private getBleDevice(device: BluetoothDevice): BleDevice {\n    const bleDevice: BleDevice = {\n      deviceId: device.id,\n      // use undefined instead of null if name is not available\n      name: device.name ?? undefined,\n    };\n    return bleDevice;\n  }\n}\n","export async function runWithTimeout(promise, time, exception) {\n    let timer;\n    return Promise.race([\n        promise,\n        new Promise((_, reject) => {\n            timer = setTimeout(() => reject(exception), time);\n        }),\n    ]).finally(() => clearTimeout(timer));\n}\n//# sourceMappingURL=timeout.js.map","export async function runWithTimeout(promise: Promise<unknown>, time: number, exception: symbol): Promise<unknown> {\n  let timer: ReturnType<typeof setTimeout>;\n  return Promise.race([\n    promise,\n    new Promise((_, reject) => {\n      timer = setTimeout(() => reject(exception), time);\n    }),\n  ]).finally(() => clearTimeout(timer));\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","BluetoothLeWeb","_assertThisInitialized","_asyncToGenerator","_classCallCheck","_createClass","_inherits","_createSuper","_tsGenerator","_core","_conversion","_timeout","WebPlugin","_","_super","_this","apply","concat","Array","prototype","slice","arguments","deviceMap","Map","discoveredDevices","scan","DEFAULT_CONNECTION_TIMEOUT","onAdvertisementReceivedCallback","onAdvertisementReceived","onDisconnectedCallback","onDisconnected","onCharacteristicValueChangedCallback","onCharacteristicValueChanged","key","value","_state","label","navigator","bluetooth","unavailable","getAvailability","sent","options","filters","device","getFilters","requestDevice","undefined","optionalServices","acceptAllDevices","set","getBleDevice","requestBleDeviceOptions","stopLEScan","removeEventListener","addEventListener","requestLEScan","acceptAllAdvertisements","keepRepeatedDevices","allowDuplicates","event","_a","_b","deviceId","isNew","has","result","localName","rssi","txPower","manufacturerData","mapToObject","serviceData","uuids","map","webUUIDToString","notifyListeners","active","stop","getDevices","devices","filter","deviceIds","includes","_options","gatt","connected","timeoutError","timeout","error","getDeviceFromMap","Symbol","trys","push","runWithTimeout","connect","disconnect","target","services","bleServices","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","service","characteristics","bleCharacteristics","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_iterator1","_step1","characteristic","_tmp","getPrimaryServices","iterator","next","done","getCharacteristics","uuid","properties","getProperties","getDescriptors","descriptors","return","descriptor","broadcast","read","writeWithoutResponse","write","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","getPrimaryService","getCharacteristic","getDescriptor","readValue","dataView","hexStringToDataView","writeValueWithResponse","writeValueWithoutResponse","writeValue","startNotifications","stopNotifications","namePrefix","promise","time","exception","_runWithTimeout","timer","Promise","race","reject","setTimeout","finally","clearTimeout"],"version":3,"file":"web.d44f1718.js.map"}